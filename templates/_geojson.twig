{#=== Options ========================================================================================================#}
{% set attr_opt = {
    class:    field.class|default(''),
    name_id:  key,
    required: field.required|default(false),
    readonly: field.readonly|default(false)
}%}

{#=== Config =========================================================================================================#}
{% set extension_config = app['bolt-field-geojson.config'] %}
{% set map_cfg = {
    zoom:      field.map.zoom is defined       ? field.map.zoom       : extension_config.get('map').zoom,
    max_zoom:  field.map.max_zoom is defined   ? field.map.max_zoom   : extension_config.get('map').max_zoom,
    height:    field.map.height is defined     ? field.map.height     : extension_config.get('map').height,
    lat:       field.map.lat is defined        ? field.map.lat        : extension_config.get('map').lat,
    long:      field.map.long is defined       ? field.map.long       : extension_config.get('map').long,
    osm_url:   field.map.osm_url is defined    ? field.map.osm_url    : extension_config.get('map').osm_url,
    osm_cont:  field.map.osm_cont is defined   ? field.map.osm_cont   : extension_config.get('map').osm_cont,
    polyline:  field.draw.polyline is defined  ? field.draw.polyline  : extension_config.get('draw').polyline,
    polygon:   field.draw.polygon is defined   ? field.draw.polygon   : extension_config.get('draw').polygon,
    marker:    field.draw.marker is defined    ? field.draw.marker    : extension_config.get('draw').marker,
    circle:    field.draw.circle is defined    ? field.draw.circle    : extension_config.get('draw').circle,
    rectangle: field.draw.rectangle is defined ? field.draw.rectangle : extension_config.get('draw').rectangle,
    remove:    field.draw.remove is defined    ? field.draw.remove    : extension_config.get('draw').remove,
    style:     field.draw.style is defined     ? field.draw.style     : extension_config.get('draw').style
} %}

{#=== FIELDSET =======================================================================================================#}
<fieldset class="form-group bolt-field-geojson">
    <legend class="sr-only">{{field.label|default(key)}}</legend>
    <label class="main col-xs-12 control-label control-label">{{field.label|default(key)}}
        {% if field.info|default(false) %}
        <i class="info-pop fa fa-info-circle" data-content="{{ field.info|escape('html_attr') }}" data-html="1" data-title="Image list" data-original-title="" title=""><span class="sr-only">Info</span></i>
        {% endif %}
    </label>
    <div class="col-xs-12">
        <div id="map-{{ key }}"
            data-field-type="geojson"
            data-geojsonfield-zoom="{{ map_cfg.zoom }}"
            data-geojsonfield-maxzoom="{{ map_cfg.max_zoom }}"
            data-geojsonfield-lat="{{ map_cfg.lat }}"
            data-geojsonfield-long="{{ map_cfg.long }}"
            data-geojsonfield-osmurl="{{ map_cfg.osm_url }}"
            data-geojsonfield-osmcont="{{ map_cfg.osm_cont }}"
            data-geojsonfield-polyline="{{ map_cfg.polyline }}"
            data-geojsonfield-polygon="{{ map_cfg.polygon }}"
            data-geojsonfield-marker="{{ map_cfg.marker }}"
            data-geojsonfield-circle="{{ map_cfg.circle }}"
            data-geojsonfield-rectangle="{{ map_cfg.rectangle }}"
            data-geojsonfield-remove="{{ map_cfg.remove }}"
            data-geojsonfield-style="{{ map_cfg.style }}"
            style="width: 100%; height: {{ map_cfg.height }}; border: 1px solid #ccc"></div>
        <input type="hidden" {{ macro.attr(attr_opt) }} id="{{ key }}" value="{{ context.content.get(key)|default('') }}">
    </div>
    <script>
        $( function() {
            $( "#map-{{ key }}" ).jqGeojsonField({
                inputSelector: "#{{ key }}"
            });
        } );
    </script>
</fieldset>
